@page "/tax-period-rules"
@using congestionTax.Components.Models
@using congestionTax.Components.Services.CityService
@using congestionTax.Components.Services.TaxRuleService
@inject ITaxRuleService TaxRuleService
@inject ICityService CityService

<h3>Congestion Tax Rules</h3>

<div>
    <label for="cityId">Select City:</label>
    <select bind="_selectedCityId" @onchange="LoadTaxRules">
        @foreach (var city in _cities)
        {
            <option value="@city.Id">@city.Name</option>
        }
    </select>
</div>

<div>
    <h4>Tax Period Rules for @_selectedCityName</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Start Time</th>
                <th>End Time</th>
                <th>Amount</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var taxPeriod in _taxPeriods)
            {
                <tr>
                    <td>@taxPeriod.StartTime</td>
                    <td>@taxPeriod.EndTime</td>
                    <td>@taxPeriod.Amount</td>
                    <td>
                        <button @onclick="() => EditTaxPeriod(taxPeriod)">Edit</button>
                        <button @onclick="() => DeleteTaxPeriod(taxPeriod.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<button @onclick="AddNewTaxPeriod">Add Tax Period</button>

@if (_isTaxPeriodModalVisible)
{
    <EditForm Model="_newTaxPeriod" OnValidSubmit="SaveTaxPeriod">
        <label>Start Time:</label>
        <InputTime bind-Value="@_newTaxPeriod.StartTime" />
        
        <label>End Time:</label>
        <InputTime bind-Value="@_newTaxPeriod.EndTime" />

        <label>Amount:</label>
        <InputNumber TValue="int" bind-Value="_newTaxPeriod.Amount" />

        <button type="submit">Save</button>
        <button type="button" @onclick="CloseTaxPeriodModal">Cancel</button>
    </EditForm>
}

@code {
    private List<TaxPeriod> _taxPeriods = new();
    private List<City> _cities = new();
    private TaxPeriod _newTaxPeriod;
    private int _selectedCityId;
    private string _selectedCityName;
    private bool _isTaxPeriodModalVisible = false;
    private bool _isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        _cities = await CityService.GetCitiesAsync();
    }

    private async Task LoadTaxRules(ChangeEventArgs e)
    {
        _selectedCityId = int.Parse(e.Value?.ToString()!);
        _selectedCityName = _cities.First(c => c.Id == _selectedCityId).Name;
        _taxPeriods = await TaxRuleService.GetTaxPeriodRulesAsync(_selectedCityId);
    }

    private void AddNewTaxPeriod()
    {
        _newTaxPeriod = new TaxPeriod();
        _isEditing = false;
        _isTaxPeriodModalVisible = true;
    }

    private void EditTaxPeriod(TaxPeriod taxPeriod)
    {
        _newTaxPeriod = new TaxPeriod()
        {
            Id = taxPeriod.Id,
            StartTime = taxPeriod.StartTime,
            EndTime = taxPeriod.EndTime,
            Amount = taxPeriod.Amount
        };
        _isEditing = true;
        _isTaxPeriodModalVisible = true;
    }

    private async Task SaveTaxPeriod()
    {
        _newTaxPeriod.CityId = _selectedCityId;
        await TaxRuleService.AddOrUpdateTaxPeriodRuleAsync(_newTaxPeriod);
        _isTaxPeriodModalVisible = false;
        _taxPeriods = await TaxRuleService.GetTaxPeriodRulesAsync(_selectedCityId);
    }

    private async Task DeleteTaxPeriod(int taxPeriodId)
    {
        await TaxRuleService.RemoveTaxPeriodRuleAsync(taxPeriodId);
        _taxPeriods = await TaxRuleService.GetTaxPeriodRulesAsync(_selectedCityId);
    }

    private void CloseTaxPeriodModal()
    {
        _isTaxPeriodModalVisible = false;
    }

}

